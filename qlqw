#!/usr/bin/env python3

"""
qlqw is the third iteration of the concept of the same name. This qlqw
is written in Python and uses pyinotify to drive its actions.
"""

import sys
import argparse
import os
import pathlib
import subprocess
import urllib.parse
import pyinotify

DOT_QUODLIBET = ".quodlibet"
CURRENT_FNAME = "current"

DEBUG = True


def system(cmd, timeout=13):
    """Run an external command."""
    proc = subprocess.Popen(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    (out_, err_) = proc.communicate(timeout=timeout)
    out = out_.decode(encoding="UTF-8")
    err = err_.decode(encoding="UTF-8")

    sts = proc.wait(timeout=timeout)
    return (sts, out, err)


class QlStatusError(OSError):
    pass


class QlQueue(object):

    PRINT = "quodlibet --print-queue"
    FPFX = "file://"

    def __post_process(self, stdout):
        unurl = urllib.parse.unquote(stdout)
        unpfx = [line[len(self.FPFX):] for line in unurl.splitlines()]
        if DEBUG:
            unfound = [p for p in unpfx if not os.path.exists(p)]
            assert not unfound,\
                "Paths not found:\n\t{}".format("\n\t".join(unfound))
        return unpfx

    def fetch_queue(self):
        """
        Ask Quod Libet for the latest queue; return a list of files.
        Raise a QlStatusError if we find that Quod Libet has exited.
        """
        (sts, out, _) = system(self.PRINT.split())
        if sts:
            errfmt = "queue fetch QL call exited with code {}"
            raise QlStatusError(errfmt.format(sts))
        return self.__post_process(out)


class ProcessQlCurrent(pyinotify.ProcessEvent):
    """Basic class to field inotify events on QL."""
    def my_init(self, ql_queue=None):
        """Takes an instance of QlQueue for itself."""
        if ql_queue is None:
            self.ql_queue = QlQueue()
        else:
            self.ql_queue = ql_queue

    def process_IN_MODIFY(self, event):
        """Check if the ``current'' file was modified."""
        if event.name == CURRENT_FNAME:
            print("``{}'' modified!".format(CURRENT_FNAME))


def ql_get_qld():
    """Gets the path to ~/.quodlibet/."""
    home_dir = str(pathlib.Path.home())
    return os.path.join(home_dir, DOT_QUODLIBET)


def main():
    """Initialize inotify and enter the main loop."""
    mask = pyinotify.IN_MODIFY
    ql_queue = QlQueue()
    processor = ProcessQlCurrent(ql_queue=ql_queue)

    wama = pyinotify.WatchManager()
    notifier = pyinotify.Notifier(wama, processor)

    watch_path = ql_get_qld()
    wama.add_watch(watch_path, mask)
    notifier.loop()

    return 0

if __name__ == "__main__":
    sys.exit(main())
