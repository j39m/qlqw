#!/usr/bin/env python3

"""
qlqw is the third iteration of the concept of the same name. This qlqw
is written in Python and uses pyinotify to drive its actions.
"""

import sys
import argparse
import os
import pathlib
import subprocess
import urllib.parse
import pyinotify

DOT_QUODLIBET = ".quodlibet"
CURRENT_FNAME = "current"

DEBUG = True


def system(cmd, timeout=13):
    """Run an external command."""
    proc = subprocess.Popen(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    (out_, err_) = proc.communicate(timeout=timeout)
    out = out_.decode(encoding="UTF-8")
    err = err_.decode(encoding="UTF-8")

    sts = proc.wait(timeout=timeout)
    return (sts, out, err)


class ProcessQlCurrent(pyinotify.ProcessEvent):
    """Basic class to field inotify events on QL."""
    def my_init(self, **kwargs):
        self.ql_queue = QlQueue()

    def process_IN_MODIFY(self, event):
        """Check if the ``current'' file was modified."""
        if event.name == CURRENT_FNAME:
            print("``{}'' modified!".format(CURRENT_FNAME))


class QlQueue(object):

    PRINT = "quodlibet --print-queue"
    FPFX = "file://"

    def __post_process(self, stdout):
        unurl = urllib.parse.unquote(stdout)
        unpfx = [line[len(self.FPFX):] for line in unurl.splitlines()]
        if DEBUG:
            unfound = [p for p in unpfx if not os.path.exists(p)]
            assert not unfound,\
                "Paths not found:\n\t{}".format("\n\t".join(unfound))
        return unpfx

    def fetch_queue(self):
        """Ask Quod Libet for the latest queue; return a list of files."""
        (_, out, _) = system(self.PRINT.split())
        return self.__post_process(out)


def ql_get_current_fname():
    """Gets the path to ~/.quodlibet/."""
    home_dir = str(pathlib.Path.home())
    return os.path.join(home_dir, DOT_QUODLIBET)


def main():
    """The main entry point of this qlqw."""
    watch_path = ql_get_current_fname()

    wama = pyinotify.WatchManager()
    mask = pyinotify.IN_MODIFY
    notifier = pyinotify.Notifier(wama, ProcessQlCurrent())

    wama.add_watch(watch_path, mask)
    notifier.loop()

    return 0

if __name__ == "__main__":
    sys.exit(main())
